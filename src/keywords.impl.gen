#!/usr/bin/env python3
#depends keywords.txt

import os.path

keywords_txt = os.path.join(os.path.dirname(__file__), 'keywords.txt')

keywords = sorted(line.strip() for line in open(keywords_txt))

directives_list = os.path.join(os.path.dirname(__file__), 'directives.list')

directives = sorted(
    line.strip().split()[0]
    for line in open(directives_list)
    if line[0].isalpha()
)

def code(tabs, *parts, **kw):
    print('\t' * tabs, *parts, sep='', **kw)

def gen_binary_search(strings, ident, prefix, tabs=1):
    if len(strings) > 3:
        middle_index = len(strings) // 2
        middle_string = strings[middle_index]
        temp = f"{middle_string}_check"
        code(tabs, f'int {temp} = strcmp({ident}, "{middle_string}");')
        code(tabs, f'if ({temp} < 0) {{')
        gen_binary_search(strings[:middle_index], ident, prefix, tabs + 1)
        code(tabs, '}')
        code(tabs, f'else if ({temp} == 0) return {prefix}_{middle_string.upper()};')
        code(tabs, 'else {')
        gen_binary_search(strings[middle_index + 1:], ident, prefix, tabs + 1)
        code(tabs, '}')
    else:
        for string in strings:
            code(tabs, f'if (strcmp({ident}, "{string}") == 0) return {prefix}_{string.upper()};')

print("#include <string.h>")

print("Keyword str_to_kw(const char* str) {")
gen_binary_search(keywords, 'str', 'KW', 1)
code(1, "return KW_NONE;")
print("}")

print("const char* kw_to_str(Keyword kw) {")
code(1, "switch (kw) {")
for kw in keywords:
    code(2, f'case KW_{kw.upper()}: return "{kw}";')
code(2, 'default: return "<ERROR>";')
code(1, "}")
print("}")

print("Directive str_to_dir(const char* str) {")
gen_binary_search(directives, 'str', 'DIR', 1)
code(1, "return DIR_UNKNOWN;")
print("}")

print("const char* dir_to_str(Directive kw) {")
code(1, "switch (kw) {")
for d in directives:
    code(2, f'case DIR_{d.upper()}: return "#{d}";')
code(2, 'default: return "<ERROR>";')
code(1, "}")
print("}")
