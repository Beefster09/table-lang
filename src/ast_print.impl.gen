#!/usr/bin/env python3

import os.path
import pprint
import re
import sys

AST_INDENT = ' ' * 2
INLINE_ARRAY_MAX_SIZE = 5

def debug(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)

def code(tabs, *parts, **kw):
    print('\t' * tabs, *parts, sep='', **kw)

TYPE_FORMATS = {
    ('char', '*'):      '\\"%s\\"',
    ('int',):           '%d',
    ('size_t',):        '%zd',
    ('intmax_t',):      '%lld',
    ('long', 'double'): '%Lg',
    ('double',):        '%g',
    ('char',):          "'%c'",
    ('Rune',):          "'%c'",
    ('bool',):          '%s',
    ('void', '*'):      '%p',
}

node_types = {}
enum_types = {}

def parse_type(c_type):
    parts = tuple(c_type.replace('*', ' * ').split())
    filtered = tuple(p for p in parts if p not in ('const', 'ARRAY', 'MAP'))
    result = {
        'type': parts,
        'filtered_type': filtered,
        'format': TYPE_FORMATS.get(filtered),
        'is_primitive': filtered in TYPE_FORMATS,
        'filter_l': '',
        'filter_r': '? "true" : "false"' if filtered == ('bool',) else '',
        'is_node': filtered[0].startswith('AST_') and filtered[1] == '*',
        'is_array': parts[-1] == 'ARRAY',
        'is_map': False,
        'is_enum': len(filtered) == 1 and filtered[0] in enum_types,
    }
    if result['is_enum']:
        enum = enum_types[filtered[0]]
        result['filter_l'] = f'enum_{enum["prefix"].lower()}to_str('
        result['filter_r'] = ')'
        result['format'] = '%s'
    return result

def parse_map_type(key_type, value_type):
    key_parts = tuple(key_type.replace('*', ' * ').split())
    value_parts = tuple(value_type.replace('*', ' * ').split())
    key_filtered = tuple(p for p in key_parts if p not in ('const', 'ARRAY', 'MAP'))
    value_filtered = tuple(p for p in value_parts if p not in ('const', 'ARRAY', 'MAP'))
    result = {
        'type': value_parts,
        'filtered_type': value_filtered,
        'format': TYPE_FORMATS.get(value_filtered),
        'is_primitive': value_filtered in TYPE_FORMATS,
        'filter_l': '',
        'filter_r': '? "true" : "false"' if value_filtered == ('bool',) else '',
        'is_node': value_filtered[0].startswith('AST_') and value_filtered[1] == '*',
        'is_array': value_parts[-1] == 'ARRAY',
        'is_map': True,
        'is_enum': len(value_filtered) == 1 and value_filtered[0] in enum_types,
        'key_type': key_filtered,
        'key_format': TYPE_FORMATS.get(key_filtered),
        'key_is_primitive': key_filtered in TYPE_FORMATS,
    }
    if result['is_enum']:
        enum = enum_types[value_filtered[0]]
        result['filter_l'] = f'enum_{enum["prefix"].lower()}to_str('
        result['filter_r'] = ')'
        result['format'] = '%s'
    return result

node_start = re.compile(r"^\s*typedef\s+struct\s+(NODE_\w+)")
node_field = re.compile(r"^\s*([\w\s\*]+)\s*\b(\w+);")
node_map_field = re.compile(r"^\s*struct\s*{\s*(.+)\s*\bkey\s*;\s*(.+)\s*\bvalue\s*;\s*}\s*MAP\s*\b(\w+);")
node_end = re.compile(r"^\s*}\s*AST_(\w+)\s*;")

enum_start = re.compile(r"^\s*typedef\s+enum\s+(\w+)")
enum_value = re.compile(r"^\s*(\w+)\s*=\s*((?:0x)?\d+|'.+')\s*,?\s*$")
enum_end = re.compile(r"^\s*}\s*(\w+)\s*;")

ast_nodes_h = os.path.join(os.path.dirname(__file__), 'ast_nodes.h')

with open(ast_nodes_h) as f:
    fs = iter(f)
    for line in fs:
        match_node_start = node_start.match(line)
        if match_node_start:
            tag = match_node_start.group(1)
            node_type = {'tag': tag, 'fields': {}}
            for line in fs:
                match_end = node_end.match(line)
                if match_end:
                    node_type['name'] = match_end.group(1)
                    node_types[tag] = node_type
                    break
                match_field = node_field.match(line)
                if match_field:
                    node_type['fields'][match_field.group(2)] = parse_type(match_field.group(1))
                    continue
                match_map_field = node_map_field.match(line)
                if match_map_field:
                    node_type['fields'][match_map_field.group(3)] = parse_map_type(match_map_field.group(1), match_map_field.group(2))
        match_enum_start = enum_start.match(line)
        if match_enum_start:
            prefix = match_enum_start.group(1)
            enum_type = {'prefix': prefix, 'values': {}}
            for line in fs:
                match_end = enum_end.match(line)
                if match_end:
                    enum_type['name'] = match_end.group(1)
                    enum_types[match_end.group(1)] = enum_type
                    break
                match_value = enum_value.match(line)
                if match_value:
                    enum_value_name = match_value.group(1)
                    info = {
                        'name': enum_value_name,
                        'value': match_value.group(2)
                    }
                    if enum_value_name.startswith(prefix):
                        info['pretty'] = enum_value_name[len(prefix):]
                    else:
                        info['pretty'] = f"<{enum_value_name}>"
                    enum_type['values'][enum_value_name] = info

if int(os.environ.get('DEBUG', '0')):
    debug(pprint.pformat(node_types))
    debug(pprint.pformat(enum_types))

def indent(tabs=1, offset=0):
    code(tabs, f'for (int j = indent + {offset}; j > 0; j--) fprintf(stream, "{AST_INDENT}");')

for enum in enum_types.values():
    print(f'static const char* enum_{enum["prefix"].lower()}to_str({enum["name"]} value) {{')
    code(1, 'switch (value) {')
    for info in enum['values'].values():
        code(2, f'case {info["name"]}: return "{info["pretty"]} ({info["value"]})";')
    code(2, f'default: return "<{enum["name"]} \\?\\?\\?>";')
    code(1, '}')
    print('}')

print("static void print_ast_node(FILE* stream, const AST_Node* node, int indent) {")

code(1, 'if (!node) {')
code(2,   'fprintf(stream, "<null>\\n");')
code(2,   'return;')
code(1, '}')
print()

# Node type name and position information
code(1, 'switch (node->node_type) {')
for tag, node in sorted(node_types.items()):
    code(2, f'case {tag}: fprintf(stream, "{node["name"]}"); break;')
code(2,   'default: fprintf(stream, "<#%08x>", node->node_type);')
code(1, '}')
code(1, 'fprintf(stream, " (%d,%d..%d,%d)",')
code(2,         'node->start_line, node->start_col,')
code(2,         'node->end_line, node->end_col);')
print()

code(1, 'switch (node->node_type) {')
for tag, node in sorted(node_types.items()):
    code(2, f'case {tag}:', end=' ')
    fields = node['fields']
    node_type = 'AST_' + node['name']
    if fields:
        casted = node['name'].lower() + '_node'
        print('{')
        code(3, f'{node_type}* {casted} = ({node_type}*) node;')

        if len(fields) == 1 and list(fields.values())[0]['is_primitive']:
            for name, info in fields.items():
                if info['is_array']:
                    code(3, '{')
                    code(4, f'int arr_len = arrlen({casted}->{name});')
                    code(4, f'bool is_inline = arr_len <= {INLINE_ARRAY_MAX_SIZE};')
                    code(4, r'const char* sep = is_inline? ", " : "\n";')
                    code(4, f'fprintf(stream, " {{ {name} = [%s", is_inline? " " : "\\n");')
                    code(4, 'for (int i = 0; i < arr_len; i++) {')
                    code(5, 'if (!is_inline) {')
                    indent(6, 1)
                    code(5, '}')
                    code(5, f'fprintf(stream, "{info["format"]}%s",'
                                  f' {info["filter_l"]}{casted}->{name}[i]{info["filter_r"]},')
                    code(6,         '(!is_inline || i + 1 < arr_len) ? sep : " " );')
                    code(4, '}')
                    code(4, 'if (!is_inline) {')
                    indent(5, 1)
                    code(4, '}')
                    code(4, 'fprintf(stream, "] }\\n");')
                    code(3, '}')
                else:
                    code(3,
                        f'fprintf(stream, " {{ {name} = {info["format"]} }}\\n",'
                        f' {info["filter_l"]}{casted}->{name}{info["filter_r"]});'
                    )
        else:
            code(3, 'fprintf(stream, " {\\n");')
            for name, info in fields.items():
                indent(3, 1)

                if info['is_array']:
                    inline_max = 0 if info['is_node'] else INLINE_ARRAY_MAX_SIZE
                    code(3, '{')
                    code(4, f'int arr_len = arrlen({casted}->{name});')
                    code(4, f'bool is_inline = arr_len <= {inline_max};')
                    if not info['is_node']:
                        code(4, r'const char* sep = is_inline? ", " : "\n";')
                    code(4, f'fprintf(stream, "{name} = [%s", is_inline? " " : "\\n");')
                    code(4, 'for (int i = 0; i < arr_len; i++) {')
                    code(5, 'if (!is_inline) {')
                    indent(6, 2)
                    code(5, '}')
                    if info['is_node']:
                        code(5, f'print_ast_node(stream, (AST_Node*) {casted}->{name}[i], indent + 2);')
                    elif info['is_primitive'] or info['filtered_type'][-1] == '*':
                        code(5, f'fprintf(stream, "{info.get("format", "%p")}%s",'
                                      f' {info["filter_l"]}{casted}->{name}[i]{info["filter_r"]},')
                        code(6,         '(!is_inline || i + 1 < arr_len) ? sep : " " );')
                    else:
                        code(5, 'fprintf(stream, "?%s", (!is_inline || i + 1 < arr_len) ? sep : " ");')
                    code(4, '}')
                    code(4, 'if (!is_inline) {')
                    indent(5, 1)
                    code(4, '}')
                    code(4, 'fprintf(stream, "]\\n");')
                    code(3, '}')

                elif info['is_map']:
                    lencall = "shlen" if info["key_type"] == ("char", "*") else "hmlen"
                    code(3, f'if ({casted}->{name}) {{')
                    code(4, f'int map_len = {lencall}({casted}->{name});')
                    code(4, f'fprintf(stream, "{name} = {{\\n");')
                    code(4, 'for (int i = 0; i < map_len; i++) {')
                    indent(5, 2)
                    if info['key_is_primitive']:
                        code(5, f'fprintf(stream, "{info["key_format"]}: ", {casted}->{name}[i].key);')
                    else:
                        code(5, r'fprintf(stream, "\?\?\?#%d: ", i);')
                    if info['is_node']:
                        code(5, f'print_ast_node(stream, (AST_Node*) {casted}->{name}[i].value, indent + 2);')
                    elif info['is_primitive'] or info['filtered_type'][-1] == '*':
                        code(5, f'fprintf(stream, "{info.get("format", "%p")}",'
                                      f' {info["filter_l"]}{casted}->{name}[i].value{info["filter_r"]});')
                    else:
                        code(5, r'fprintf(stream, "\?\?\?");')
                    code(4, '}')
                    indent(4, 1)
                    code(4, 'fprintf(stream, "}\\n");')
                    code(3, '}')
                    code(3, 'else {')
                    code(4, f'fprintf(stream, "{name} = {{ }}\\n");')
                    code(3, '}')

                elif info['is_primitive'] or info['is_enum']:
                    code(3, f'fprintf(stream, "{name} = {info["format"]}\\n",'
                        f' {info["filter_l"]}{casted}->{name}{info["filter_r"]});')
                elif info['is_node']:
                    code(3, f'fprintf(stream, "{name} = ");')
                    code(3, f'print_ast_node(stream, (AST_Node*) {casted}->{name}, indent + 1);')
                else:
                    code(3, f'fprintf(stream, "{name} = \\?\\?\\?\\n");')

            indent(3, 0)
            code(3, 'fprintf(stream, "}\\n");')
        code(2, '} break;')
        print()
    else:
        print('fprintf(stream, "\\n"); break;')
code(2, 'default: fprintf(stream, " \\?\\?\\?\\n");')
code(1, '}')

print("}")
